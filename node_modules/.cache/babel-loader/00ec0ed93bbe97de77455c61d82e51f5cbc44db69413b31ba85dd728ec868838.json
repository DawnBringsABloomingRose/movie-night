{"ast":null,"code":"export function getPlaceholder(locale, picker, customizePlaceholder) {\n  if (customizePlaceholder !== undefined) {\n    return customizePlaceholder;\n  }\n  if (picker === 'year' && locale.lang.yearPlaceholder) {\n    return locale.lang.yearPlaceholder;\n  }\n  if (picker === 'quarter' && locale.lang.quarterPlaceholder) {\n    return locale.lang.quarterPlaceholder;\n  }\n  if (picker === 'month' && locale.lang.monthPlaceholder) {\n    return locale.lang.monthPlaceholder;\n  }\n  if (picker === 'week' && locale.lang.weekPlaceholder) {\n    return locale.lang.weekPlaceholder;\n  }\n  if (picker === 'time' && locale.timePickerLocale.placeholder) {\n    return locale.timePickerLocale.placeholder;\n  }\n  return locale.lang.placeholder;\n}\nexport function getRangePlaceholder(locale, picker, customizePlaceholder) {\n  if (customizePlaceholder !== undefined) {\n    return customizePlaceholder;\n  }\n  if (picker === 'year' && locale.lang.yearPlaceholder) {\n    return locale.lang.rangeYearPlaceholder;\n  }\n  if (picker === 'quarter' && locale.lang.quarterPlaceholder) {\n    return locale.lang.rangeQuarterPlaceholder;\n  }\n  if (picker === 'month' && locale.lang.monthPlaceholder) {\n    return locale.lang.rangeMonthPlaceholder;\n  }\n  if (picker === 'week' && locale.lang.weekPlaceholder) {\n    return locale.lang.rangeWeekPlaceholder;\n  }\n  if (picker === 'time' && locale.timePickerLocale.placeholder) {\n    return locale.timePickerLocale.rangePlaceholder;\n  }\n  return locale.lang.rangePlaceholder;\n}\nexport function transPlacement2DropdownAlign(direction, placement) {\n  const overflow = {\n    adjustX: 1,\n    adjustY: 1\n  };\n  switch (placement) {\n    case 'bottomLeft':\n      {\n        return {\n          points: ['tl', 'bl'],\n          offset: [0, 4],\n          overflow\n        };\n      }\n    case 'bottomRight':\n      {\n        return {\n          points: ['tr', 'br'],\n          offset: [0, 4],\n          overflow\n        };\n      }\n    case 'topLeft':\n      {\n        return {\n          points: ['bl', 'tl'],\n          offset: [0, -4],\n          overflow\n        };\n      }\n    case 'topRight':\n      {\n        return {\n          points: ['br', 'tr'],\n          offset: [0, -4],\n          overflow\n        };\n      }\n    default:\n      {\n        return {\n          points: direction === 'rtl' ? ['tr', 'br'] : ['tl', 'bl'],\n          offset: [0, 4],\n          overflow\n        };\n      }\n  }\n}\nfunction toArray(list) {\n  if (!list) {\n    return [];\n  }\n  return Array.isArray(list) ? list : [list];\n}\nexport function getTimeProps(props) {\n  const format = props.format,\n    picker = props.picker,\n    showHour = props.showHour,\n    showMinute = props.showMinute,\n    showSecond = props.showSecond,\n    use12Hours = props.use12Hours;\n  const firstFormat = toArray(format)[0];\n  const showTimeObj = Object.assign({}, props);\n  // https://github.com/ant-design/ant-design/issues/44275\n  if (format && Array.isArray(format)) {\n    showTimeObj.format = firstFormat;\n  }\n  if (firstFormat && typeof firstFormat === 'string') {\n    if (!firstFormat.includes('s') && showSecond === undefined) {\n      showTimeObj.showSecond = false;\n    }\n    if (!firstFormat.includes('m') && showMinute === undefined) {\n      showTimeObj.showMinute = false;\n    }\n    if (!firstFormat.includes('H') && !firstFormat.includes('h') && !firstFormat.includes('K') && !firstFormat.includes('k') && showHour === undefined) {\n      showTimeObj.showHour = false;\n    }\n    if ((firstFormat.includes('a') || firstFormat.includes('A')) && use12Hours === undefined) {\n      showTimeObj.use12Hours = true;\n    }\n  }\n  if (picker === 'time') {\n    return showTimeObj;\n  }\n  if (typeof firstFormat === 'function') {\n    // format of showTime should use default when format is custom format function\n    delete showTimeObj.format;\n  }\n  return {\n    showTime: showTimeObj\n  };\n}\nexport function mergeAllowClear(allowClear, clearIcon, defaultClearIcon) {\n  if (allowClear === false) {\n    return false;\n  }\n  const defaults = {\n    clearIcon: clearIcon !== null && clearIcon !== void 0 ? clearIcon : defaultClearIcon\n  };\n  return typeof allowClear === 'object' ? Object.assign(Object.assign({}, defaults), allowClear) : defaults;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}