{"ast":null,"code":"\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider';\nimport AnchorContext from './context';\nconst AnchorLink = props => {\n  const href = props.href,\n    title = props.title,\n    customizePrefixCls = props.prefixCls,\n    children = props.children,\n    className = props.className,\n    target = props.target,\n    replace = props.replace;\n  const context = React.useContext(AnchorContext);\n  const _ref = context || {},\n    registerLink = _ref.registerLink,\n    unregisterLink = _ref.unregisterLink,\n    scrollTo = _ref.scrollTo,\n    onClick = _ref.onClick,\n    activeLink = _ref.activeLink,\n    direction = _ref.direction;\n  React.useEffect(() => {\n    registerLink === null || registerLink === void 0 ? void 0 : registerLink(href);\n    return () => {\n      unregisterLink === null || unregisterLink === void 0 ? void 0 : unregisterLink(href);\n    };\n  }, [href]);\n  const handleClick = e => {\n    if (replace) {\n      e.preventDefault();\n      window.location.replace(href);\n    }\n    onClick === null || onClick === void 0 ? void 0 : onClick(e, {\n      title,\n      href\n    });\n    scrollTo === null || scrollTo === void 0 ? void 0 : scrollTo(href);\n  };\n  // =================== Warning =====================\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Anchor.Link');\n    process.env.NODE_ENV !== \"production\" ? warning(!children || direction !== 'horizontal', 'usage', '`Anchor.Link children` is not supported when `Anchor` direction is horizontal') : void 0;\n  }\n  const _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls;\n  const prefixCls = getPrefixCls('anchor', customizePrefixCls);\n  const active = activeLink === href;\n  const wrapperClassName = classNames(`${prefixCls}-link`, className, {\n    [`${prefixCls}-link-active`]: active\n  });\n  const titleClassName = classNames(`${prefixCls}-link-title`, {\n    [`${prefixCls}-link-title-active`]: active\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: titleClassName,\n    href: href,\n    title: typeof title === 'string' ? title : '',\n    target: target,\n    onClick: handleClick\n  }, title), direction !== 'horizontal' ? children : null);\n};\nexport default AnchorLink;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}