{"ast":null,"code":"\"use client\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport DeleteOutlined from \"@ant-design/icons/es/icons/DeleteOutlined\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport TransButton from '../_util/transButton';\nimport Checkbox from '../checkbox';\nimport { useLocale } from '../locale';\nimport defaultLocale from '../locale/en_US';\nconst ListItem = props => {\n  const renderedText = props.renderedText,\n    renderedEl = props.renderedEl,\n    item = props.item,\n    checked = props.checked,\n    disabled = props.disabled,\n    prefixCls = props.prefixCls,\n    onClick = props.onClick,\n    onRemove = props.onRemove,\n    showRemove = props.showRemove;\n  const className = classNames(`${prefixCls}-content-item`, {\n    [`${prefixCls}-content-item-disabled`]: disabled || item.disabled,\n    [`${prefixCls}-content-item-checked`]: checked\n  });\n  let title;\n  if (typeof renderedText === 'string' || typeof renderedText === 'number') {\n    title = String(renderedText);\n  }\n  const _useLocale = useLocale('Transfer', defaultLocale.Transfer),\n    _useLocale2 = _slicedToArray(_useLocale, 1),\n    contextLocale = _useLocale2[0];\n  const liProps = {\n    className,\n    title\n  };\n  const labelNode = /*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-content-item-text`\n  }, renderedEl);\n  if (showRemove) {\n    return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, liProps), labelNode, /*#__PURE__*/React.createElement(TransButton, {\n      disabled: disabled || item.disabled,\n      className: `${prefixCls}-content-item-remove`,\n      \"aria-label\": contextLocale === null || contextLocale === void 0 ? void 0 : contextLocale.remove,\n      onClick: () => {\n        onRemove === null || onRemove === void 0 ? void 0 : onRemove(item);\n      }\n    }, /*#__PURE__*/React.createElement(DeleteOutlined, null)));\n  }\n  // Default click to select\n  liProps.onClick = disabled || item.disabled ? undefined : () => onClick(item);\n  return /*#__PURE__*/React.createElement(\"li\", Object.assign({}, liProps), /*#__PURE__*/React.createElement(Checkbox, {\n    className: `${prefixCls}-checkbox`,\n    checked: checked,\n    disabled: disabled || item.disabled\n  }), labelNode);\n};\nexport default /*#__PURE__*/React.memo(ListItem);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}