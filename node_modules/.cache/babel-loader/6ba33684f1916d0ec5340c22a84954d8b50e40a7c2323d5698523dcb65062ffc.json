{"ast":null,"code":"import { genFocusStyle, resetComponent, textEllipsis } from '../../style';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport genMotionStyle from './motion';\nconst genCardStyle = token => {\n  const componentCls = token.componentCls,\n    tabsCardPadding = token.tabsCardPadding,\n    cardBg = token.cardBg,\n    cardGutter = token.cardGutter,\n    colorBorderSecondary = token.colorBorderSecondary,\n    itemSelectedColor = token.itemSelectedColor;\n  return {\n    [`${componentCls}-card`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        [`${componentCls}-tab`]: {\n          margin: 0,\n          padding: tabsCardPadding,\n          background: cardBg,\n          border: `${token.lineWidth}px ${token.lineType} ${colorBorderSecondary}`,\n          transition: `all ${token.motionDurationSlow} ${token.motionEaseInOut}`\n        },\n        [`${componentCls}-tab-active`]: {\n          color: itemSelectedColor,\n          background: token.colorBgContainer\n        },\n        [`${componentCls}-ink-bar`]: {\n          visibility: 'hidden'\n        }\n      },\n      // ========================== Top & Bottom ==========================\n      [`&${componentCls}-top, &${componentCls}-bottom`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab + ${componentCls}-tab`]: {\n            marginLeft: {\n              _skip_check_: true,\n              value: `${cardGutter}px`\n            }\n          }\n        }\n      },\n      [`&${componentCls}-top`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            borderRadius: `${token.borderRadiusLG}px ${token.borderRadiusLG}px 0 0`\n          },\n          [`${componentCls}-tab-active`]: {\n            borderBottomColor: token.colorBgContainer\n          }\n        }\n      },\n      [`&${componentCls}-bottom`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            borderRadius: `0 0 ${token.borderRadiusLG}px ${token.borderRadiusLG}px`\n          },\n          [`${componentCls}-tab-active`]: {\n            borderTopColor: token.colorBgContainer\n          }\n        }\n      },\n      // ========================== Left & Right ==========================\n      [`&${componentCls}-left, &${componentCls}-right`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab + ${componentCls}-tab`]: {\n            marginTop: `${cardGutter}px`\n          }\n        }\n      },\n      [`&${componentCls}-left`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            borderRadius: {\n              _skip_check_: true,\n              value: `${token.borderRadiusLG}px 0 0 ${token.borderRadiusLG}px`\n            }\n          },\n          [`${componentCls}-tab-active`]: {\n            borderRightColor: {\n              _skip_check_: true,\n              value: token.colorBgContainer\n            }\n          }\n        }\n      },\n      [`&${componentCls}-right`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            borderRadius: {\n              _skip_check_: true,\n              value: `0 ${token.borderRadiusLG}px ${token.borderRadiusLG}px 0`\n            }\n          },\n          [`${componentCls}-tab-active`]: {\n            borderLeftColor: {\n              _skip_check_: true,\n              value: token.colorBgContainer\n            }\n          }\n        }\n      }\n    }\n  };\n};\nconst genDropdownStyle = token => {\n  const componentCls = token.componentCls,\n    itemHoverColor = token.itemHoverColor,\n    dropdownEdgeChildVerticalPadding = token.dropdownEdgeChildVerticalPadding;\n  return {\n    [`${componentCls}-dropdown`]: Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: -9999,\n      left: {\n        _skip_check_: true,\n        value: -9999\n      },\n      zIndex: token.zIndexPopup,\n      display: 'block',\n      '&-hidden': {\n        display: 'none'\n      },\n      [`${componentCls}-dropdown-menu`]: {\n        maxHeight: token.tabsDropdownHeight,\n        margin: 0,\n        padding: `${dropdownEdgeChildVerticalPadding}px 0`,\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        textAlign: {\n          _skip_check_: true,\n          value: 'left'\n        },\n        listStyleType: 'none',\n        backgroundColor: token.colorBgContainer,\n        backgroundClip: 'padding-box',\n        borderRadius: token.borderRadiusLG,\n        outline: 'none',\n        boxShadow: token.boxShadowSecondary,\n        '&-item': Object.assign(Object.assign({}, textEllipsis), {\n          display: 'flex',\n          alignItems: 'center',\n          minWidth: token.tabsDropdownWidth,\n          margin: 0,\n          padding: `${token.paddingXXS}px ${token.paddingSM}px`,\n          color: token.colorText,\n          fontWeight: 'normal',\n          fontSize: token.fontSize,\n          lineHeight: token.lineHeight,\n          cursor: 'pointer',\n          transition: `all ${token.motionDurationSlow}`,\n          '> span': {\n            flex: 1,\n            whiteSpace: 'nowrap'\n          },\n          '&-remove': {\n            flex: 'none',\n            marginLeft: {\n              _skip_check_: true,\n              value: token.marginSM\n            },\n            color: token.colorTextDescription,\n            fontSize: token.fontSizeSM,\n            background: 'transparent',\n            border: 0,\n            cursor: 'pointer',\n            '&:hover': {\n              color: itemHoverColor\n            }\n          },\n          '&:hover': {\n            background: token.controlItemBgHover\n          },\n          '&-disabled': {\n            '&, &:hover': {\n              color: token.colorTextDisabled,\n              background: 'transparent',\n              cursor: 'not-allowed'\n            }\n          }\n        })\n      }\n    })\n  };\n};\nconst genPositionStyle = token => {\n  const componentCls = token.componentCls,\n    margin = token.margin,\n    colorBorderSecondary = token.colorBorderSecondary,\n    horizontalMargin = token.horizontalMargin,\n    verticalItemPadding = token.verticalItemPadding,\n    verticalItemMargin = token.verticalItemMargin;\n  return {\n    // ========================== Top & Bottom ==========================\n    [`${componentCls}-top, ${componentCls}-bottom`]: {\n      flexDirection: 'column',\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        margin: horizontalMargin,\n        '&::before': {\n          position: 'absolute',\n          right: {\n            _skip_check_: true,\n            value: 0\n          },\n          left: {\n            _skip_check_: true,\n            value: 0\n          },\n          borderBottom: `${token.lineWidth}px ${token.lineType} ${colorBorderSecondary}`,\n          content: \"''\"\n        },\n        [`${componentCls}-ink-bar`]: {\n          height: token.lineWidthBold,\n          '&-animated': {\n            transition: `width ${token.motionDurationSlow}, left ${token.motionDurationSlow},\n            right ${token.motionDurationSlow}`\n          }\n        },\n        [`${componentCls}-nav-wrap`]: {\n          '&::before, &::after': {\n            top: 0,\n            bottom: 0,\n            width: token.controlHeight\n          },\n          '&::before': {\n            left: {\n              _skip_check_: true,\n              value: 0\n            },\n            boxShadow: token.boxShadowTabsOverflowLeft\n          },\n          '&::after': {\n            right: {\n              _skip_check_: true,\n              value: 0\n            },\n            boxShadow: token.boxShadowTabsOverflowRight\n          },\n          [`&${componentCls}-nav-wrap-ping-left::before`]: {\n            opacity: 1\n          },\n          [`&${componentCls}-nav-wrap-ping-right::after`]: {\n            opacity: 1\n          }\n        }\n      }\n    },\n    [`${componentCls}-top`]: {\n      [`> ${componentCls}-nav,\n        > div > ${componentCls}-nav`]: {\n        '&::before': {\n          bottom: 0\n        },\n        [`${componentCls}-ink-bar`]: {\n          bottom: 0\n        }\n      }\n    },\n    [`${componentCls}-bottom`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        order: 1,\n        marginTop: `${margin}px`,\n        marginBottom: 0,\n        '&::before': {\n          top: 0\n        },\n        [`${componentCls}-ink-bar`]: {\n          top: 0\n        }\n      },\n      [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {\n        order: 0\n      }\n    },\n    // ========================== Left & Right ==========================\n    [`${componentCls}-left, ${componentCls}-right`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        flexDirection: 'column',\n        minWidth: token.controlHeight * 1.25,\n        // >>>>>>>>>>> Tab\n        [`${componentCls}-tab`]: {\n          padding: verticalItemPadding,\n          textAlign: 'center'\n        },\n        [`${componentCls}-tab + ${componentCls}-tab`]: {\n          margin: verticalItemMargin\n        },\n        // >>>>>>>>>>> Nav\n        [`${componentCls}-nav-wrap`]: {\n          flexDirection: 'column',\n          '&::before, &::after': {\n            right: {\n              _skip_check_: true,\n              value: 0\n            },\n            left: {\n              _skip_check_: true,\n              value: 0\n            },\n            height: token.controlHeight\n          },\n          '&::before': {\n            top: 0,\n            boxShadow: token.boxShadowTabsOverflowTop\n          },\n          '&::after': {\n            bottom: 0,\n            boxShadow: token.boxShadowTabsOverflowBottom\n          },\n          [`&${componentCls}-nav-wrap-ping-top::before`]: {\n            opacity: 1\n          },\n          [`&${componentCls}-nav-wrap-ping-bottom::after`]: {\n            opacity: 1\n          }\n        },\n        // >>>>>>>>>>> Ink Bar\n        [`${componentCls}-ink-bar`]: {\n          width: token.lineWidthBold,\n          '&-animated': {\n            transition: `height ${token.motionDurationSlow}, top ${token.motionDurationSlow}`\n          }\n        },\n        [`${componentCls}-nav-list, ${componentCls}-nav-operations`]: {\n          flex: '1 0 auto',\n          flexDirection: 'column'\n        }\n      }\n    },\n    [`${componentCls}-left`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        [`${componentCls}-ink-bar`]: {\n          right: {\n            _skip_check_: true,\n            value: 0\n          }\n        }\n      },\n      [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {\n        marginLeft: {\n          _skip_check_: true,\n          value: `-${token.lineWidth}px`\n        },\n        borderLeft: {\n          _skip_check_: true,\n          value: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`\n        },\n        [`> ${componentCls}-content > ${componentCls}-tabpane`]: {\n          paddingLeft: {\n            _skip_check_: true,\n            value: token.paddingLG\n          }\n        }\n      }\n    },\n    [`${componentCls}-right`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        order: 1,\n        [`${componentCls}-ink-bar`]: {\n          left: {\n            _skip_check_: true,\n            value: 0\n          }\n        }\n      },\n      [`> ${componentCls}-content-holder, > div > ${componentCls}-content-holder`]: {\n        order: 0,\n        marginRight: {\n          _skip_check_: true,\n          value: -token.lineWidth\n        },\n        borderRight: {\n          _skip_check_: true,\n          value: `${token.lineWidth}px ${token.lineType} ${token.colorBorder}`\n        },\n        [`> ${componentCls}-content > ${componentCls}-tabpane`]: {\n          paddingRight: {\n            _skip_check_: true,\n            value: token.paddingLG\n          }\n        }\n      }\n    }\n  };\n};\nconst genSizeStyle = token => {\n  const componentCls = token.componentCls,\n    cardPaddingSM = token.cardPaddingSM,\n    cardPaddingLG = token.cardPaddingLG,\n    horizontalItemPaddingSM = token.horizontalItemPaddingSM,\n    horizontalItemPaddingLG = token.horizontalItemPaddingLG;\n  return {\n    [componentCls]: {\n      '&-small': {\n        [`> ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            padding: horizontalItemPaddingSM,\n            fontSize: token.titleFontSizeSM\n          }\n        }\n      },\n      '&-large': {\n        [`> ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            padding: horizontalItemPaddingLG,\n            fontSize: token.titleFontSizeLG\n          }\n        }\n      }\n    },\n    [`${componentCls}-card`]: {\n      [`&${componentCls}-small`]: {\n        [`> ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            padding: cardPaddingSM\n          }\n        },\n        [`&${componentCls}-bottom`]: {\n          [`> ${componentCls}-nav ${componentCls}-tab`]: {\n            borderRadius: `0 0 ${token.borderRadius}px ${token.borderRadius}px`\n          }\n        },\n        [`&${componentCls}-top`]: {\n          [`> ${componentCls}-nav ${componentCls}-tab`]: {\n            borderRadius: `${token.borderRadius}px ${token.borderRadius}px 0 0`\n          }\n        },\n        [`&${componentCls}-right`]: {\n          [`> ${componentCls}-nav ${componentCls}-tab`]: {\n            borderRadius: {\n              _skip_check_: true,\n              value: `0 ${token.borderRadius}px ${token.borderRadius}px 0`\n            }\n          }\n        },\n        [`&${componentCls}-left`]: {\n          [`> ${componentCls}-nav ${componentCls}-tab`]: {\n            borderRadius: {\n              _skip_check_: true,\n              value: `${token.borderRadius}px 0 0 ${token.borderRadius}px`\n            }\n          }\n        }\n      },\n      [`&${componentCls}-large`]: {\n        [`> ${componentCls}-nav`]: {\n          [`${componentCls}-tab`]: {\n            padding: cardPaddingLG\n          }\n        }\n      }\n    }\n  };\n};\nconst genTabStyle = token => {\n  const componentCls = token.componentCls,\n    itemActiveColor = token.itemActiveColor,\n    itemHoverColor = token.itemHoverColor,\n    iconCls = token.iconCls,\n    tabsHorizontalItemMargin = token.tabsHorizontalItemMargin,\n    horizontalItemPadding = token.horizontalItemPadding,\n    itemSelectedColor = token.itemSelectedColor,\n    itemColor = token.itemColor;\n  const tabCls = `${componentCls}-tab`;\n  return {\n    [tabCls]: {\n      position: 'relative',\n      WebkitTouchCallout: 'none',\n      WebkitTapHighlightColor: 'transparent',\n      display: 'inline-flex',\n      alignItems: 'center',\n      padding: horizontalItemPadding,\n      fontSize: token.titleFontSize,\n      background: 'transparent',\n      border: 0,\n      outline: 'none',\n      cursor: 'pointer',\n      color: itemColor,\n      '&-btn, &-remove': Object.assign({\n        '&:focus:not(:focus-visible), &:active': {\n          color: itemActiveColor\n        }\n      }, genFocusStyle(token)),\n      '&-btn': {\n        outline: 'none',\n        transition: 'all 0.3s'\n      },\n      '&-remove': {\n        flex: 'none',\n        marginRight: {\n          _skip_check_: true,\n          value: -token.marginXXS\n        },\n        marginLeft: {\n          _skip_check_: true,\n          value: token.marginXS\n        },\n        color: token.colorTextDescription,\n        fontSize: token.fontSizeSM,\n        background: 'transparent',\n        border: 'none',\n        outline: 'none',\n        cursor: 'pointer',\n        transition: `all ${token.motionDurationSlow}`,\n        '&:hover': {\n          color: token.colorTextHeading\n        }\n      },\n      '&:hover': {\n        color: itemHoverColor\n      },\n      [`&${tabCls}-active ${tabCls}-btn`]: {\n        color: itemSelectedColor,\n        textShadow: token.tabsActiveTextShadow\n      },\n      [`&${tabCls}-disabled`]: {\n        color: token.colorTextDisabled,\n        cursor: 'not-allowed'\n      },\n      [`&${tabCls}-disabled ${tabCls}-btn, &${tabCls}-disabled ${componentCls}-remove`]: {\n        '&:focus, &:active': {\n          color: token.colorTextDisabled\n        }\n      },\n      [`& ${tabCls}-remove ${iconCls}`]: {\n        margin: 0\n      },\n      [iconCls]: {\n        marginRight: {\n          _skip_check_: true,\n          value: token.marginSM\n        }\n      }\n    },\n    [`${tabCls} + ${tabCls}`]: {\n      margin: {\n        _skip_check_: true,\n        value: tabsHorizontalItemMargin\n      }\n    }\n  };\n};\nconst genRtlStyle = token => {\n  const componentCls = token.componentCls,\n    tabsHorizontalItemMarginRTL = token.tabsHorizontalItemMarginRTL,\n    iconCls = token.iconCls,\n    cardGutter = token.cardGutter;\n  const rtlCls = `${componentCls}-rtl`;\n  return {\n    [rtlCls]: {\n      direction: 'rtl',\n      [`${componentCls}-nav`]: {\n        [`${componentCls}-tab`]: {\n          margin: {\n            _skip_check_: true,\n            value: tabsHorizontalItemMarginRTL\n          },\n          [`${componentCls}-tab:last-of-type`]: {\n            marginLeft: {\n              _skip_check_: true,\n              value: 0\n            }\n          },\n          [iconCls]: {\n            marginRight: {\n              _skip_check_: true,\n              value: 0\n            },\n            marginLeft: {\n              _skip_check_: true,\n              value: `${token.marginSM}px`\n            }\n          },\n          [`${componentCls}-tab-remove`]: {\n            marginRight: {\n              _skip_check_: true,\n              value: `${token.marginXS}px`\n            },\n            marginLeft: {\n              _skip_check_: true,\n              value: `-${token.marginXXS}px`\n            },\n            [iconCls]: {\n              margin: 0\n            }\n          }\n        }\n      },\n      [`&${componentCls}-left`]: {\n        [`> ${componentCls}-nav`]: {\n          order: 1\n        },\n        [`> ${componentCls}-content-holder`]: {\n          order: 0\n        }\n      },\n      [`&${componentCls}-right`]: {\n        [`> ${componentCls}-nav`]: {\n          order: 0\n        },\n        [`> ${componentCls}-content-holder`]: {\n          order: 1\n        }\n      },\n      // ====================== Card ======================\n      [`&${componentCls}-card${componentCls}-top, &${componentCls}-card${componentCls}-bottom`]: {\n        [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n          [`${componentCls}-tab + ${componentCls}-tab`]: {\n            marginRight: {\n              _skip_check_: true,\n              value: cardGutter\n            },\n            marginLeft: {\n              _skip_check_: true,\n              value: 0\n            }\n          }\n        }\n      }\n    },\n    [`${componentCls}-dropdown-rtl`]: {\n      direction: 'rtl'\n    },\n    [`${componentCls}-menu-item`]: {\n      [`${componentCls}-dropdown-rtl`]: {\n        textAlign: {\n          _skip_check_: true,\n          value: 'right'\n        }\n      }\n    }\n  };\n};\nconst genTabsStyle = token => {\n  const componentCls = token.componentCls,\n    tabsCardPadding = token.tabsCardPadding,\n    cardHeight = token.cardHeight,\n    cardGutter = token.cardGutter,\n    itemHoverColor = token.itemHoverColor,\n    itemActiveColor = token.itemActiveColor,\n    colorBorderSecondary = token.colorBorderSecondary;\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      display: 'flex',\n      // ========================== Navigation ==========================\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        position: 'relative',\n        display: 'flex',\n        flex: 'none',\n        alignItems: 'center',\n        [`${componentCls}-nav-wrap`]: {\n          position: 'relative',\n          display: 'flex',\n          flex: 'auto',\n          alignSelf: 'stretch',\n          overflow: 'hidden',\n          whiteSpace: 'nowrap',\n          transform: 'translate(0)',\n          // >>>>> Ping shadow\n          '&::before, &::after': {\n            position: 'absolute',\n            zIndex: 1,\n            opacity: 0,\n            transition: `opacity ${token.motionDurationSlow}`,\n            content: \"''\",\n            pointerEvents: 'none'\n          }\n        },\n        [`${componentCls}-nav-list`]: {\n          position: 'relative',\n          display: 'flex',\n          transition: `opacity ${token.motionDurationSlow}`\n        },\n        // >>>>>>>> Operations\n        [`${componentCls}-nav-operations`]: {\n          display: 'flex',\n          alignSelf: 'stretch'\n        },\n        [`${componentCls}-nav-operations-hidden`]: {\n          position: 'absolute',\n          visibility: 'hidden',\n          pointerEvents: 'none'\n        },\n        [`${componentCls}-nav-more`]: {\n          position: 'relative',\n          padding: tabsCardPadding,\n          background: 'transparent',\n          border: 0,\n          color: token.colorText,\n          '&::after': {\n            position: 'absolute',\n            right: {\n              _skip_check_: true,\n              value: 0\n            },\n            bottom: 0,\n            left: {\n              _skip_check_: true,\n              value: 0\n            },\n            height: token.controlHeightLG / 8,\n            transform: 'translateY(100%)',\n            content: \"''\"\n          }\n        },\n        [`${componentCls}-nav-add`]: Object.assign({\n          minWidth: cardHeight,\n          marginLeft: {\n            _skip_check_: true,\n            value: cardGutter\n          },\n          padding: `0 ${token.paddingXS}px`,\n          background: 'transparent',\n          border: `${token.lineWidth}px ${token.lineType} ${colorBorderSecondary}`,\n          borderRadius: `${token.borderRadiusLG}px ${token.borderRadiusLG}px 0 0`,\n          outline: 'none',\n          cursor: 'pointer',\n          color: token.colorText,\n          transition: `all ${token.motionDurationSlow} ${token.motionEaseInOut}`,\n          '&:hover': {\n            color: itemHoverColor\n          },\n          '&:active, &:focus:not(:focus-visible)': {\n            color: itemActiveColor\n          }\n        }, genFocusStyle(token))\n      },\n      [`${componentCls}-extra-content`]: {\n        flex: 'none'\n      },\n      // ============================ InkBar ============================\n      [`${componentCls}-ink-bar`]: {\n        position: 'absolute',\n        background: token.inkBarColor,\n        pointerEvents: 'none'\n      }\n    }), genTabStyle(token)), {\n      // =========================== TabPanes ===========================\n      [`${componentCls}-content`]: {\n        position: 'relative',\n        width: '100%'\n      },\n      [`${componentCls}-content-holder`]: {\n        flex: 'auto',\n        minWidth: 0,\n        minHeight: 0\n      },\n      [`${componentCls}-tabpane`]: {\n        outline: 'none',\n        '&-hidden': {\n          display: 'none'\n        }\n      }\n    }),\n    [`${componentCls}-centered`]: {\n      [`> ${componentCls}-nav, > div > ${componentCls}-nav`]: {\n        [`${componentCls}-nav-wrap`]: {\n          [`&:not([class*='${componentCls}-nav-wrap-ping'])`]: {\n            justifyContent: 'center'\n          }\n        }\n      }\n    }\n  };\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Tabs', token => {\n  const tabsToken = mergeToken(token, {\n    // `cardPadding` is empty by default, so we could calculate with dynamic `cardHeight`\n    tabsCardPadding: token.cardPadding || `${(token.cardHeight - Math.round(token.fontSize * token.lineHeight)) / 2 - token.lineWidth}px ${token.padding}px`,\n    dropdownEdgeChildVerticalPadding: token.paddingXXS,\n    tabsActiveTextShadow: '0 0 0.25px currentcolor',\n    tabsDropdownHeight: 200,\n    tabsDropdownWidth: 120,\n    tabsHorizontalItemMargin: `0 0 0 ${token.horizontalItemGutter}px`,\n    tabsHorizontalItemMarginRTL: `0 0 0 ${token.horizontalItemGutter}px`\n  });\n  return [genSizeStyle(tabsToken), genRtlStyle(tabsToken), genPositionStyle(tabsToken), genDropdownStyle(tabsToken), genCardStyle(tabsToken), genTabsStyle(tabsToken), genMotionStyle(tabsToken)];\n}, token => {\n  const cardHeight = token.controlHeightLG;\n  return {\n    zIndexPopup: token.zIndexPopupBase + 50,\n    cardBg: token.colorFillAlter,\n    cardHeight,\n    // Initialize with empty string, because cardPadding will be calculated with cardHeight by default.\n    cardPadding: ``,\n    cardPaddingSM: `${token.paddingXXS * 1.5}px ${token.padding}px`,\n    cardPaddingLG: `${token.paddingXS}px ${token.padding}px ${token.paddingXXS * 1.5}px`,\n    titleFontSize: token.fontSize,\n    titleFontSizeLG: token.fontSizeLG,\n    titleFontSizeSM: token.fontSize,\n    inkBarColor: token.colorPrimary,\n    horizontalMargin: `0 0 ${token.margin}px 0`,\n    horizontalItemGutter: 32,\n    // Initialize with empty string, because horizontalItemMargin will be calculated with horizontalItemGutter by default.\n    horizontalItemMargin: ``,\n    horizontalItemMarginRTL: ``,\n    horizontalItemPadding: `${token.paddingSM}px 0`,\n    horizontalItemPaddingSM: `${token.paddingXS}px 0`,\n    horizontalItemPaddingLG: `${token.padding}px 0`,\n    verticalItemPadding: `${token.paddingXS}px ${token.paddingLG}px`,\n    verticalItemMargin: `${token.margin}px 0 0 0`,\n    itemColor: token.colorText,\n    itemSelectedColor: token.colorPrimary,\n    itemHoverColor: token.colorPrimaryHover,\n    itemActiveColor: token.colorPrimaryActive,\n    cardGutter: token.marginXXS / 2\n  };\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}