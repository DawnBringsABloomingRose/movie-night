{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\nimport { resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const componentCls = token.componentCls,\n    lineHeight = token.lineHeight,\n    padding = token.padding,\n    paddingXS = token.paddingXS,\n    borderRadius = token.borderRadius,\n    borderRadiusXS = token.borderRadiusXS,\n    colorPrimary = token.colorPrimary,\n    colorText = token.colorText,\n    colorFill = token.colorFill,\n    indicatorHeight = token.indicatorHeight,\n    indicatorWidth = token.indicatorWidth,\n    boxShadowTertiary = token.boxShadowTertiary,\n    tourZIndexPopup = token.tourZIndexPopup,\n    fontSize = token.fontSize,\n    colorBgElevated = token.colorBgElevated,\n    fontWeightStrong = token.fontWeightStrong,\n    marginXS = token.marginXS,\n    colorTextLightSolid = token.colorTextLightSolid,\n    tourBorderRadius = token.tourBorderRadius,\n    colorWhite = token.colorWhite,\n    colorBgTextHover = token.colorBgTextHover,\n    tourCloseSize = token.tourCloseSize,\n    motionDurationSlow = token.motionDurationSlow,\n    antCls = token.antCls;\n  return [{\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      color: colorText,\n      position: 'absolute',\n      zIndex: tourZIndexPopup,\n      display: 'block',\n      visibility: 'visible',\n      fontSize,\n      lineHeight,\n      width: 520,\n      '--antd-arrow-background-color': colorBgElevated,\n      '&-pure': {\n        maxWidth: '100%',\n        position: 'relative'\n      },\n      [`&${componentCls}-hidden`]: {\n        display: 'none'\n      },\n      // ============================= panel content ============================\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      },\n      [`${componentCls}-inner`]: {\n        textAlign: 'start',\n        textDecoration: 'none',\n        borderRadius: tourBorderRadius,\n        boxShadow: boxShadowTertiary,\n        position: 'relative',\n        backgroundColor: colorBgElevated,\n        border: 'none',\n        backgroundClip: 'padding-box',\n        [`${componentCls}-close`]: {\n          position: 'absolute',\n          top: padding,\n          insetInlineEnd: padding,\n          color: token.colorIcon,\n          outline: 'none',\n          width: tourCloseSize,\n          height: tourCloseSize,\n          borderRadius: token.borderRadiusSM,\n          transition: `background-color ${token.motionDurationMid}, color ${token.motionDurationMid}`,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          '&:hover': {\n            color: token.colorIconHover,\n            backgroundColor: token.wireframe ? 'transparent' : token.colorFillContent\n          }\n        },\n        [`${componentCls}-cover`]: {\n          textAlign: 'center',\n          padding: `${padding + tourCloseSize + paddingXS}px ${padding}px 0`,\n          img: {\n            width: '100%'\n          }\n        },\n        [`${componentCls}-header`]: {\n          padding: `${padding}px ${padding}px ${paddingXS}px`,\n          [`${componentCls}-title`]: {\n            lineHeight,\n            fontSize,\n            fontWeight: fontWeightStrong\n          }\n        },\n        [`${componentCls}-description`]: {\n          padding: `0 ${padding}px`,\n          lineHeight,\n          wordWrap: 'break-word'\n        },\n        [`${componentCls}-footer`]: {\n          padding: `${paddingXS}px ${padding}px ${padding}px`,\n          textAlign: 'end',\n          borderRadius: `0 0 ${borderRadiusXS}px ${borderRadiusXS}px`,\n          display: 'flex',\n          [`${componentCls}-indicators`]: {\n            display: 'inline-block',\n            [`${componentCls}-indicator`]: {\n              width: indicatorWidth,\n              height: indicatorHeight,\n              display: 'inline-block',\n              borderRadius: '50%',\n              background: colorFill,\n              '&:not(:last-child)': {\n                marginInlineEnd: indicatorHeight\n              },\n              '&-active': {\n                background: colorPrimary\n              }\n            }\n          },\n          [`${componentCls}-buttons`]: {\n            marginInlineStart: 'auto',\n            [`${antCls}-btn`]: {\n              marginInlineStart: marginXS\n            }\n          }\n        }\n      },\n      // =============================  primary type  ===========================\n      // `$` for panel, `&$` for pure panel\n      [`${componentCls}-primary, &${componentCls}-primary`]: {\n        '--antd-arrow-background-color': colorPrimary,\n        [`${componentCls}-inner`]: {\n          color: colorTextLightSolid,\n          textAlign: 'start',\n          textDecoration: 'none',\n          backgroundColor: colorPrimary,\n          borderRadius,\n          boxShadow: boxShadowTertiary,\n          [`${componentCls}-close`]: {\n            color: colorTextLightSolid\n          },\n          [`${componentCls}-indicators`]: {\n            [`${componentCls}-indicator`]: {\n              background: new TinyColor(colorTextLightSolid).setAlpha(0.15).toRgbString(),\n              '&-active': {\n                background: colorTextLightSolid\n              }\n            }\n          },\n          [`${componentCls}-prev-btn`]: {\n            color: colorTextLightSolid,\n            borderColor: new TinyColor(colorTextLightSolid).setAlpha(0.15).toRgbString(),\n            backgroundColor: colorPrimary,\n            '&:hover': {\n              backgroundColor: new TinyColor(colorTextLightSolid).setAlpha(0.15).toRgbString(),\n              borderColor: 'transparent'\n            }\n          },\n          [`${componentCls}-next-btn`]: {\n            color: colorPrimary,\n            borderColor: 'transparent',\n            background: colorWhite,\n            '&:hover': {\n              background: new TinyColor(colorBgTextHover).onBackground(colorWhite).toRgbString()\n            }\n          }\n        }\n      }\n    }),\n    // ============================= mask ===========================\n    [`${componentCls}-mask`]: {\n      [`${componentCls}-placeholder-animated`]: {\n        transition: `all ${motionDurationSlow}`\n      }\n    },\n    // =========== Limit left and right placement radius ==============\n    [['&-placement-left', '&-placement-leftTop', '&-placement-leftBottom', '&-placement-right', '&-placement-rightTop', '&-placement-rightBottom'].join(',')]: {\n      [`${componentCls}-inner`]: {\n        borderRadius: Math.min(tourBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n      }\n    }\n  },\n  // ============================= Arrow ===========================\n  getArrowStyle(token, {\n    colorBg: 'var(--antd-arrow-background-color)',\n    contentRadius: tourBorderRadius,\n    limitVerticalRadius: true\n  })];\n};\n// ============================== Export ==============================\nexport default genComponentStyleHook('Tour', token => {\n  const borderRadiusLG = token.borderRadiusLG,\n    fontSize = token.fontSize,\n    lineHeight = token.lineHeight;\n  const TourToken = mergeToken(token, {\n    tourZIndexPopup: token.zIndexPopupBase + 70,\n    indicatorWidth: 6,\n    indicatorHeight: 6,\n    tourBorderRadius: borderRadiusLG,\n    tourCloseSize: fontSize * lineHeight\n  });\n  return [genBaseStyle(TourToken)];\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}