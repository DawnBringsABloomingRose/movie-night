{"ast":null,"code":"import { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport genColorBlockStyle from './color-block';\nimport genInputStyle from './input';\nimport genPickerStyle from './picker';\nimport genPresetsStyle from './presets';\nexport const genActiveStyle = token => ({\n  boxShadow: `0 0 0 ${token.controlOutlineWidth}px ${token.controlOutline}`,\n  borderInlineEndWidth: token.lineWidth,\n  outline: 0\n});\nconst genRtlStyle = token => {\n  const componentCls = token.componentCls;\n  return {\n    '&-rtl': {\n      [`${componentCls}-presets-color`]: {\n        '&::after': {\n          direction: 'ltr'\n        }\n      },\n      [`${componentCls}-clear`]: {\n        '&::after': {\n          direction: 'ltr'\n        }\n      }\n    }\n  };\n};\nconst genClearStyle = (token, size, extraStyle) => {\n  const componentCls = token.componentCls,\n    borderRadiusSM = token.borderRadiusSM,\n    lineWidth = token.lineWidth,\n    colorSplit = token.colorSplit,\n    red6 = token.red6;\n  return {\n    [`${componentCls}-clear`]: Object.assign(Object.assign({\n      width: size,\n      height: size,\n      borderRadius: borderRadiusSM,\n      border: `${lineWidth}px solid ${colorSplit}`,\n      position: 'relative',\n      cursor: 'pointer',\n      overflow: 'hidden'\n    }, extraStyle), {\n      '&::after': {\n        content: '\"\"',\n        position: 'absolute',\n        insetInlineEnd: lineWidth,\n        top: 0,\n        display: 'block',\n        width: 40,\n        height: 2,\n        transformOrigin: 'right',\n        transform: 'rotate(-45deg)',\n        backgroundColor: red6\n      }\n    })\n  };\n};\nconst genStatusStyle = token => {\n  const componentCls = token.componentCls,\n    colorError = token.colorError,\n    colorWarning = token.colorWarning,\n    colorErrorBorderHover = token.colorErrorBorderHover,\n    colorWarningBorderHover = token.colorWarningBorderHover,\n    colorErrorOutline = token.colorErrorOutline,\n    colorWarningOutline = token.colorWarningOutline;\n  return {\n    [`&${componentCls}-status-error`]: {\n      borderColor: colorError,\n      '&:hover': {\n        borderColor: colorErrorBorderHover\n      },\n      [`&${componentCls}-trigger-active`]: Object.assign({}, genActiveStyle(mergeToken(token, {\n        controlOutline: colorErrorOutline\n      })))\n    },\n    [`&${componentCls}-status-warning`]: {\n      borderColor: colorWarning,\n      '&:hover': {\n        borderColor: colorWarningBorderHover\n      },\n      [`&${componentCls}-trigger-active`]: Object.assign({}, genActiveStyle(mergeToken(token, {\n        controlOutline: colorWarningOutline\n      })))\n    }\n  };\n};\nconst genSizeStyle = token => {\n  const componentCls = token.componentCls,\n    controlHeightLG = token.controlHeightLG,\n    controlHeightSM = token.controlHeightSM,\n    controlHeight = token.controlHeight,\n    controlHeightXS = token.controlHeightXS,\n    borderRadius = token.borderRadius,\n    borderRadiusSM = token.borderRadiusSM,\n    borderRadiusXS = token.borderRadiusXS,\n    borderRadiusLG = token.borderRadiusLG,\n    fontSizeLG = token.fontSizeLG;\n  return {\n    [`&${componentCls}-lg`]: {\n      minWidth: controlHeightLG,\n      height: controlHeightLG,\n      borderRadius: borderRadiusLG,\n      [`${componentCls}-color-block, ${componentCls}-clear`]: {\n        width: controlHeight,\n        height: controlHeight,\n        borderRadius\n      },\n      [`${componentCls}-trigger-text`]: {\n        fontSize: fontSizeLG\n      }\n    },\n    [`&${componentCls}-sm`]: {\n      minWidth: controlHeightSM,\n      height: controlHeightSM,\n      borderRadius: borderRadiusSM,\n      [`${componentCls}-color-block, ${componentCls}-clear`]: {\n        width: controlHeightXS,\n        height: controlHeightXS,\n        borderRadius: borderRadiusXS\n      }\n    }\n  };\n};\nconst genColorPickerStyle = token => {\n  const componentCls = token.componentCls,\n    colorPickerWidth = token.colorPickerWidth,\n    colorPrimary = token.colorPrimary,\n    motionDurationMid = token.motionDurationMid,\n    colorBgElevated = token.colorBgElevated,\n    colorTextDisabled = token.colorTextDisabled,\n    colorText = token.colorText,\n    colorBgContainerDisabled = token.colorBgContainerDisabled,\n    borderRadius = token.borderRadius,\n    marginXS = token.marginXS,\n    marginSM = token.marginSM,\n    controlHeight = token.controlHeight,\n    controlHeightSM = token.controlHeightSM,\n    colorBgTextActive = token.colorBgTextActive,\n    colorPickerPresetColorSize = token.colorPickerPresetColorSize,\n    colorPickerPreviewSize = token.colorPickerPreviewSize,\n    lineWidth = token.lineWidth,\n    colorBorder = token.colorBorder,\n    paddingXXS = token.paddingXXS,\n    fontSize = token.fontSize;\n  return [{\n    [componentCls]: Object.assign({\n      [`${componentCls}-inner-content`]: Object.assign(Object.assign(Object.assign(Object.assign({\n        display: 'flex',\n        flexDirection: 'column',\n        width: colorPickerWidth,\n        '&-divider': {\n          margin: `${marginSM}px 0 ${marginXS}px`\n        },\n        [`${componentCls}-panel`]: Object.assign({}, genPickerStyle(token))\n      }, genColorBlockStyle(token, colorPickerPreviewSize)), genInputStyle(token)), genPresetsStyle(token)), genClearStyle(token, colorPickerPresetColorSize, {\n        marginInlineStart: 'auto',\n        marginBottom: marginXS\n      })),\n      '&-trigger': Object.assign(Object.assign(Object.assign(Object.assign({\n        minWidth: controlHeight,\n        height: controlHeight,\n        borderRadius,\n        border: `${lineWidth}px solid ${colorBorder}`,\n        cursor: 'pointer',\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        transition: `all ${motionDurationMid}`,\n        background: colorBgElevated,\n        padding: paddingXXS - lineWidth,\n        [`${componentCls}-trigger-text`]: {\n          marginInlineStart: marginXS,\n          marginInlineEnd: marginXS - (paddingXXS - lineWidth),\n          fontSize,\n          color: colorText\n        },\n        '&-active': Object.assign(Object.assign({}, genActiveStyle(token)), {\n          borderColor: colorPrimary\n        }),\n        '&:hover': {\n          borderColor: colorPrimary\n        },\n        '&-disabled': {\n          color: colorTextDisabled,\n          background: colorBgContainerDisabled,\n          cursor: 'not-allowed',\n          '&:hover': {\n            borderColor: colorBgTextActive\n          },\n          [`${componentCls}-trigger-text`]: {\n            color: colorTextDisabled\n          }\n        }\n      }, genClearStyle(token, controlHeightSM)), genColorBlockStyle(token, controlHeightSM)), genStatusStyle(token)), genSizeStyle(token))\n    }, genRtlStyle(token))\n  }];\n};\nexport default genComponentStyleHook('ColorPicker', token => {\n  const colorTextQuaternary = token.colorTextQuaternary,\n    marginSM = token.marginSM;\n  const colorPickerSliderHeight = 8;\n  const colorPickerToken = mergeToken(token, {\n    colorPickerWidth: 234,\n    colorPickerHandlerSize: 16,\n    colorPickerHandlerSizeSM: 12,\n    colorPickerAlphaInputWidth: 44,\n    colorPickerInputNumberHandleWidth: 16,\n    colorPickerPresetColorSize: 18,\n    colorPickerInsetShadow: `inset 0 0 1px 0 ${colorTextQuaternary}`,\n    colorPickerSliderHeight,\n    colorPickerPreviewSize: colorPickerSliderHeight * 2 + marginSM\n  });\n  return [genColorPickerStyle(colorPickerToken)];\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}