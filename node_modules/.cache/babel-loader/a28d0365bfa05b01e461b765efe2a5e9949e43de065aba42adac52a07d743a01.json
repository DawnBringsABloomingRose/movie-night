{"ast":null,"code":"\"use client\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport useSize from '../config-provider/hooks/useSize';\nimport Skeleton from '../skeleton';\nimport Tabs from '../tabs';\nimport Grid from './Grid';\nimport useStyle from './style';\nfunction getAction(actions) {\n  return actions.map((action, index) => /*#__PURE__*/\n  // eslint-disable-next-line react/no-array-index-key\n  React.createElement(\"li\", {\n    style: {\n      width: `${100 / actions.length}%`\n    },\n    key: `action-${index}`\n  }, /*#__PURE__*/React.createElement(\"span\", null, action)));\n}\nconst Card = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const customizePrefixCls = props.prefixCls,\n    className = props.className,\n    rootClassName = props.rootClassName,\n    style = props.style,\n    extra = props.extra,\n    _props$headStyle = props.headStyle,\n    headStyle = _props$headStyle === void 0 ? {} : _props$headStyle,\n    _props$bodyStyle = props.bodyStyle,\n    bodyStyle = _props$bodyStyle === void 0 ? {} : _props$bodyStyle,\n    title = props.title,\n    loading = props.loading,\n    _props$bordered = props.bordered,\n    bordered = _props$bordered === void 0 ? true : _props$bordered,\n    customizeSize = props.size,\n    type = props.type,\n    cover = props.cover,\n    actions = props.actions,\n    tabList = props.tabList,\n    children = props.children,\n    activeTabKey = props.activeTabKey,\n    defaultActiveTabKey = props.defaultActiveTabKey,\n    tabBarExtraContent = props.tabBarExtraContent,\n    hoverable = props.hoverable,\n    _props$tabProps = props.tabProps,\n    tabProps = _props$tabProps === void 0 ? {} : _props$tabProps,\n    others = __rest(props, [\"prefixCls\", \"className\", \"rootClassName\", \"style\", \"extra\", \"headStyle\", \"bodyStyle\", \"title\", \"loading\", \"bordered\", \"size\", \"type\", \"cover\", \"actions\", \"tabList\", \"children\", \"activeTabKey\", \"defaultActiveTabKey\", \"tabBarExtraContent\", \"hoverable\", \"tabProps\"]);\n  const _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    direction = _React$useContext.direction,\n    card = _React$useContext.card;\n  const onTabChange = key => {\n    var _a;\n    (_a = props.onTabChange) === null || _a === void 0 ? void 0 : _a.call(props, key);\n  };\n  const isContainGrid = React.useMemo(() => {\n    let containGrid = false;\n    React.Children.forEach(children, element => {\n      if (element && element.type && element.type === Grid) {\n        containGrid = true;\n      }\n    });\n    return containGrid;\n  }, [children]);\n  const prefixCls = getPrefixCls('card', customizePrefixCls);\n  const _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  const loadingBlock = /*#__PURE__*/React.createElement(Skeleton, {\n    loading: true,\n    active: true,\n    paragraph: {\n      rows: 4\n    },\n    title: false\n  }, children);\n  const hasActiveTabKey = activeTabKey !== undefined;\n  const extraProps = Object.assign(Object.assign({}, tabProps), {\n    [hasActiveTabKey ? 'activeKey' : 'defaultActiveKey']: hasActiveTabKey ? activeTabKey : defaultActiveTabKey,\n    tabBarExtraContent\n  });\n  let head;\n  const mergedSize = useSize(customizeSize);\n  const tabSize = !mergedSize || mergedSize === 'default' ? 'large' : mergedSize;\n  const tabs = tabList ? /*#__PURE__*/React.createElement(Tabs, Object.assign({\n    size: tabSize\n  }, extraProps, {\n    className: `${prefixCls}-head-tabs`,\n    onChange: onTabChange,\n    items: tabList.map(_a => {\n      var tab = _a.tab,\n        item = __rest(_a, [\"tab\"]);\n      return Object.assign({\n        label: tab\n      }, item);\n    })\n  })) : null;\n  if (title || extra || tabs) {\n    head = /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-head`,\n      style: headStyle\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-head-wrapper`\n    }, title && /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-head-title`\n    }, title), extra && /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-extra`\n    }, extra)), tabs);\n  }\n  const coverDom = cover ? /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-cover`\n  }, cover) : null;\n  const body = /*#__PURE__*/React.createElement(\"div\", {\n    className: `${prefixCls}-body`,\n    style: bodyStyle\n  }, loading ? loadingBlock : children);\n  const actionDom = actions && actions.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    className: `${prefixCls}-actions`\n  }, getAction(actions)) : null;\n  const divProps = omit(others, ['onTabChange']);\n  const classString = classNames(prefixCls, card === null || card === void 0 ? void 0 : card.className, {\n    [`${prefixCls}-loading`]: loading,\n    [`${prefixCls}-bordered`]: bordered,\n    [`${prefixCls}-hoverable`]: hoverable,\n    [`${prefixCls}-contain-grid`]: isContainGrid,\n    [`${prefixCls}-contain-tabs`]: tabList && tabList.length,\n    [`${prefixCls}-${mergedSize}`]: mergedSize,\n    [`${prefixCls}-type-${type}`]: !!type,\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, rootClassName, hashId);\n  const mergedStyle = Object.assign(Object.assign({}, card === null || card === void 0 ? void 0 : card.style), style);\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref\n  }, divProps, {\n    className: classString,\n    style: mergedStyle\n  }), head, coverDom, body, actionDom));\n});\nexport default Card;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}