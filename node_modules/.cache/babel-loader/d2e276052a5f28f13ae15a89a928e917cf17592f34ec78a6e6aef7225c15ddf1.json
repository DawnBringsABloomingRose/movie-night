{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from 'react';\nimport raf from \"rc-util/es/raf\";\nvar useIndicator = function useIndicator(_ref) {\n  var activeTabOffset = _ref.activeTabOffset,\n    horizontal = _ref.horizontal,\n    rtl = _ref.rtl,\n    indicatorSize = _ref.indicatorSize;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    inkStyle = _useState2[0],\n    setInkStyle = _useState2[1];\n  var inkBarRafRef = useRef();\n  var getLength = function getLength(origin) {\n    if (typeof indicatorSize === 'function') {\n      return indicatorSize(origin);\n    }\n    if (typeof indicatorSize === 'number') {\n      return indicatorSize;\n    }\n    return origin;\n  };\n\n  // Delay set ink style to avoid remove tab blink\n  function cleanInkBarRaf() {\n    raf.cancel(inkBarRafRef.current);\n  }\n  useEffect(function () {\n    var newInkStyle = {};\n    if (activeTabOffset) {\n      if (horizontal) {\n        if (rtl) {\n          newInkStyle.right = activeTabOffset.right + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(50%)';\n        } else {\n          newInkStyle.left = activeTabOffset.left + activeTabOffset.width / 2;\n          newInkStyle.transform = 'translateX(-50%)';\n        }\n        newInkStyle.width = getLength(activeTabOffset.width);\n      } else {\n        newInkStyle.top = activeTabOffset.top + activeTabOffset.height / 2;\n        newInkStyle.transform = 'translateY(-50%)';\n        newInkStyle.height = getLength(activeTabOffset.height);\n      }\n    }\n    cleanInkBarRaf();\n    inkBarRafRef.current = raf(function () {\n      setInkStyle(newInkStyle);\n    });\n    return cleanInkBarRaf;\n  }, [activeTabOffset, horizontal, rtl, indicatorSize]);\n  return {\n    style: inkStyle\n  };\n};\nexport default useIndicator;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}