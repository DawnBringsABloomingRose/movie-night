{"ast":null,"code":"\"use client\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport EyeOutlined from \"@ant-design/icons/es/icons/EyeOutlined\";\nimport classNames from 'classnames';\nimport RcImage from 'rc-image';\nimport { getTransitionName } from '../_util/motion';\nimport { ConfigContext } from '../config-provider';\nimport defaultLocale from '../locale/en_US';\n// CSSINJS\nimport PreviewGroup, { icons } from './PreviewGroup';\nimport useStyle from './style';\nconst Image = props => {\n  const customizePrefixCls = props.prefixCls,\n    preview = props.preview,\n    className = props.className,\n    rootClassName = props.rootClassName,\n    style = props.style,\n    otherProps = __rest(props, [\"prefixCls\", \"preview\", \"className\", \"rootClassName\", \"style\"]);\n  const _React$useContext = React.useContext(ConfigContext),\n    getPrefixCls = _React$useContext.getPrefixCls,\n    _React$useContext$loc = _React$useContext.locale,\n    contextLocale = _React$useContext$loc === void 0 ? defaultLocale : _React$useContext$loc,\n    getContextPopupContainer = _React$useContext.getPopupContainer,\n    image = _React$useContext.image;\n  const prefixCls = getPrefixCls('image', customizePrefixCls);\n  const rootPrefixCls = getPrefixCls();\n  const imageLocale = contextLocale.Image || defaultLocale.Image;\n  // Style\n  const _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  const mergedRootClassName = classNames(rootClassName, hashId);\n  const mergedClassName = classNames(className, hashId, image === null || image === void 0 ? void 0 : image.className);\n  const mergedPreview = React.useMemo(() => {\n    if (preview === false) {\n      return preview;\n    }\n    const _preview = typeof preview === 'object' ? preview : {};\n    const getContainer = _preview.getContainer,\n      restPreviewProps = __rest(_preview, [\"getContainer\"]);\n    return Object.assign(Object.assign({\n      mask: /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-mask-info`\n      }, /*#__PURE__*/React.createElement(EyeOutlined, null), imageLocale === null || imageLocale === void 0 ? void 0 : imageLocale.preview),\n      icons\n    }, restPreviewProps), {\n      getContainer: getContainer || getContextPopupContainer,\n      transitionName: getTransitionName(rootPrefixCls, 'zoom', _preview.transitionName),\n      maskTransitionName: getTransitionName(rootPrefixCls, 'fade', _preview.maskTransitionName)\n    });\n  }, [preview, imageLocale]);\n  const mergedStyle = Object.assign(Object.assign({}, image === null || image === void 0 ? void 0 : image.style), style);\n  return wrapSSR( /*#__PURE__*/React.createElement(RcImage, Object.assign({\n    prefixCls: prefixCls,\n    preview: mergedPreview,\n    rootClassName: mergedRootClassName,\n    className: mergedClassName,\n    style: mergedStyle\n  }, otherProps)));\n};\nImage.PreviewGroup = PreviewGroup;\nif (process.env.NODE_ENV !== 'production') {\n  Image.displayName = 'Image';\n}\nexport default Image;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}