{"ast":null,"code":"\"use client\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Pagination from '../pagination';\nimport ListItem from './ListItem';\nexport const OmitProps = ['handleFilter', 'handleClear', 'checkedKeys'];\nconst parsePagination = pagination => {\n  const defaultPagination = {\n    simple: true,\n    showSizeChanger: false,\n    showLessItems: false\n  };\n  return Object.assign(Object.assign({}, defaultPagination), pagination);\n};\nconst TransferListBody = (props, ref) => {\n  const prefixCls = props.prefixCls,\n    filteredRenderItems = props.filteredRenderItems,\n    selectedKeys = props.selectedKeys,\n    globalDisabled = props.disabled,\n    showRemove = props.showRemove,\n    pagination = props.pagination,\n    onScroll = props.onScroll,\n    onItemSelect = props.onItemSelect,\n    onItemRemove = props.onItemRemove;\n  const _React$useState = React.useState(1),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    current = _React$useState2[0],\n    setCurrent = _React$useState2[1];\n  const mergedPagination = React.useMemo(() => {\n    if (!pagination) {\n      return null;\n    }\n    const convertPagination = typeof pagination === 'object' ? pagination : {};\n    return parsePagination(convertPagination);\n  }, [pagination]);\n  const _useMergedState = useMergedState(10, {\n      value: mergedPagination === null || mergedPagination === void 0 ? void 0 : mergedPagination.pageSize\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    pageSize = _useMergedState2[0],\n    setPageSize = _useMergedState2[1];\n  React.useEffect(() => {\n    if (mergedPagination) {\n      const maxPageCount = Math.ceil(filteredRenderItems.length / pageSize);\n      setCurrent(Math.min(current, maxPageCount));\n    }\n  }, [filteredRenderItems, mergedPagination, pageSize]);\n  const onClick = item => {\n    onItemSelect === null || onItemSelect === void 0 ? void 0 : onItemSelect(item.key, !selectedKeys.includes(item.key));\n  };\n  const onRemove = item => {\n    onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove([item.key]);\n  };\n  const onPageChange = cur => {\n    setCurrent(cur);\n  };\n  const onSizeChange = (cur, size) => {\n    setCurrent(cur);\n    setPageSize(size);\n  };\n  const memoizedItems = React.useMemo(() => {\n    const displayItems = mergedPagination ? filteredRenderItems.slice((current - 1) * pageSize, current * pageSize) : filteredRenderItems;\n    return displayItems;\n  }, [current, filteredRenderItems, mergedPagination, pageSize]);\n  React.useImperativeHandle(ref, () => ({\n    items: memoizedItems\n  }));\n  const paginationNode = mergedPagination ? /*#__PURE__*/React.createElement(Pagination, {\n    size: \"small\",\n    disabled: globalDisabled,\n    simple: mergedPagination.simple,\n    pageSize: pageSize,\n    showLessItems: mergedPagination.showLessItems,\n    showSizeChanger: mergedPagination.showSizeChanger,\n    className: `${prefixCls}-pagination`,\n    total: filteredRenderItems.length,\n    current: current,\n    onChange: onPageChange,\n    onShowSizeChange: onSizeChange\n  }) : null;\n  const cls = classNames(`${prefixCls}-content`, {\n    [`${prefixCls}-content-show-remove`]: showRemove\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n    className: cls,\n    onScroll: onScroll\n  }, (memoizedItems || []).map(_ref => {\n    let renderedEl = _ref.renderedEl,\n      renderedText = _ref.renderedText,\n      item = _ref.item;\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.key,\n      item: item,\n      renderedText: renderedText,\n      renderedEl: renderedEl,\n      prefixCls: prefixCls,\n      showRemove: showRemove,\n      onClick: onClick,\n      onRemove: onRemove,\n      checked: selectedKeys.includes(item.key),\n      disabled: globalDisabled || item.disabled\n    });\n  })), paginationNode);\n};\nif (process.env.NODE_ENV !== 'production') {\n  TransferListBody.displayName = 'TransferListBody';\n}\nexport default /*#__PURE__*/React.forwardRef(TransferListBody);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}