{"ast":null,"code":"\"use client\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React, { createRef, forwardRef, useContext } from 'react';\nimport classNames from 'classnames';\nimport ResizeObserver from 'rc-resize-observer';\nimport omit from \"rc-util/es/omit\";\nimport throttleByAnimationFrame from '../_util/throttleByAnimationFrame';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport { getFixedBottom, getFixedTop, getTargetRect } from './utils';\nconst TRIGGER_EVENTS = ['resize', 'scroll', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'];\nfunction getDefaultTarget() {\n  return typeof window !== 'undefined' ? window : null;\n}\nvar AffixStatus;\n(function (AffixStatus) {\n  AffixStatus[AffixStatus[\"None\"] = 0] = \"None\";\n  AffixStatus[AffixStatus[\"Prepare\"] = 1] = \"Prepare\";\n})(AffixStatus || (AffixStatus = {}));\nlet InternalAffix = /*#__PURE__*/function (_React$Component) {\n  _inherits(InternalAffix, _React$Component);\n  var _super = _createSuper(InternalAffix);\n  function InternalAffix() {\n    var _this;\n    _classCallCheck(this, InternalAffix);\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      status: AffixStatus.None,\n      lastAffix: false,\n      prevTarget: null\n    };\n    _this.placeholderNodeRef = /*#__PURE__*/createRef();\n    _this.fixedNodeRef = /*#__PURE__*/createRef();\n    _this.addListeners = () => {\n      const targetFunc = _this.getTargetFunc();\n      const target = targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc();\n      const prevTarget = _this.state.prevTarget;\n      if (prevTarget !== target) {\n        TRIGGER_EVENTS.forEach(eventName => {\n          prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n          target === null || target === void 0 ? void 0 : target.addEventListener(eventName, _this.lazyUpdatePosition);\n        });\n        _this.updatePosition();\n        _this.setState({\n          prevTarget: target\n        });\n      }\n    };\n    _this.removeListeners = () => {\n      if (_this.timer) {\n        clearTimeout(_this.timer);\n        _this.timer = null;\n      }\n      const prevTarget = _this.state.prevTarget;\n      const targetFunc = _this.getTargetFunc();\n      const newTarget = targetFunc === null || targetFunc === void 0 ? void 0 : targetFunc();\n      TRIGGER_EVENTS.forEach(eventName => {\n        newTarget === null || newTarget === void 0 ? void 0 : newTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n        prevTarget === null || prevTarget === void 0 ? void 0 : prevTarget.removeEventListener(eventName, _this.lazyUpdatePosition);\n      });\n      _this.updatePosition.cancel();\n      // https://github.com/ant-design/ant-design/issues/22683\n      _this.lazyUpdatePosition.cancel();\n    };\n    _this.getOffsetTop = () => {\n      const _this$props = _this.props,\n        offsetBottom = _this$props.offsetBottom,\n        offsetTop = _this$props.offsetTop;\n      return offsetBottom === undefined && offsetTop === undefined ? 0 : offsetTop;\n    };\n    _this.getOffsetBottom = () => _this.props.offsetBottom;\n    // =================== Measure ===================\n    _this.measure = () => {\n      const _this$state = _this.state,\n        status = _this$state.status,\n        lastAffix = _this$state.lastAffix;\n      const onChange = _this.props.onChange;\n      const targetFunc = _this.getTargetFunc();\n      if (status !== AffixStatus.Prepare || !_this.fixedNodeRef.current || !_this.placeholderNodeRef.current || !targetFunc) {\n        return;\n      }\n      const offsetTop = _this.getOffsetTop();\n      const offsetBottom = _this.getOffsetBottom();\n      const targetNode = targetFunc();\n      if (targetNode) {\n        const newState = {\n          status: AffixStatus.None\n        };\n        const placeholderRect = getTargetRect(_this.placeholderNodeRef.current);\n        if (placeholderRect.top === 0 && placeholderRect.left === 0 && placeholderRect.width === 0 && placeholderRect.height === 0) {\n          return;\n        }\n        const targetRect = getTargetRect(targetNode);\n        const fixedTop = getFixedTop(placeholderRect, targetRect, offsetTop);\n        const fixedBottom = getFixedBottom(placeholderRect, targetRect, offsetBottom);\n        if (fixedTop !== undefined) {\n          newState.affixStyle = {\n            position: 'fixed',\n            top: fixedTop,\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n          newState.placeholderStyle = {\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n        } else if (fixedBottom !== undefined) {\n          newState.affixStyle = {\n            position: 'fixed',\n            bottom: fixedBottom,\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n          newState.placeholderStyle = {\n            width: placeholderRect.width,\n            height: placeholderRect.height\n          };\n        }\n        newState.lastAffix = !!newState.affixStyle;\n        if (onChange && lastAffix !== newState.lastAffix) {\n          onChange(newState.lastAffix);\n        }\n        _this.setState(newState);\n      }\n    };\n    _this.prepareMeasure = () => {\n      // event param is used before. Keep compatible ts define here.\n      _this.setState({\n        status: AffixStatus.Prepare,\n        affixStyle: undefined,\n        placeholderStyle: undefined\n      });\n      // Test if `updatePosition` called\n      if (process.env.NODE_ENV === 'test') {\n        const onTestUpdatePosition = _this.props.onTestUpdatePosition;\n        onTestUpdatePosition === null || onTestUpdatePosition === void 0 ? void 0 : onTestUpdatePosition();\n      }\n    };\n    _this.updatePosition = throttleByAnimationFrame(() => {\n      _this.prepareMeasure();\n    });\n    _this.lazyUpdatePosition = throttleByAnimationFrame(() => {\n      const targetFunc = _this.getTargetFunc();\n      const affixStyle = _this.state.affixStyle;\n      // Check position change before measure to make Safari smooth\n      if (targetFunc && affixStyle) {\n        const offsetTop = _this.getOffsetTop();\n        const offsetBottom = _this.getOffsetBottom();\n        const targetNode = targetFunc();\n        if (targetNode && _this.placeholderNodeRef.current) {\n          const targetRect = getTargetRect(targetNode);\n          const placeholderRect = getTargetRect(_this.placeholderNodeRef.current);\n          const fixedTop = getFixedTop(placeholderRect, targetRect, offsetTop);\n          const fixedBottom = getFixedBottom(placeholderRect, targetRect, offsetBottom);\n          if (fixedTop !== undefined && affixStyle.top === fixedTop || fixedBottom !== undefined && affixStyle.bottom === fixedBottom) {\n            return;\n          }\n        }\n      }\n      // Directly call prepare measure since it's already throttled.\n      _this.prepareMeasure();\n    });\n    return _this;\n  }\n  _createClass(InternalAffix, [{\n    key: \"getTargetFunc\",\n    value: function getTargetFunc() {\n      const getTargetContainer = this.context.getTargetContainer;\n      const target = this.props.target;\n      if (target !== undefined) {\n        return target;\n      }\n      return getTargetContainer !== null && getTargetContainer !== void 0 ? getTargetContainer : getDefaultTarget;\n    }\n    // Event handler\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // [Legacy] Wait for parent component ref has its value.\n      // We should use target as directly element instead of function which makes element check hard.\n      this.timer = setTimeout(this.addListeners);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      this.addListeners();\n      if (prevProps.offsetTop !== this.props.offsetTop || prevProps.offsetBottom !== this.props.offsetBottom) {\n        this.updatePosition();\n      }\n      this.measure();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.removeListeners();\n    }\n    // =================== Render ===================\n  }, {\n    key: \"render\",\n    value: function render() {\n      const _this$state2 = this.state,\n        affixStyle = _this$state2.affixStyle,\n        placeholderStyle = _this$state2.placeholderStyle;\n      const _this$props2 = this.props,\n        affixPrefixCls = _this$props2.affixPrefixCls,\n        rootClassName = _this$props2.rootClassName,\n        children = _this$props2.children;\n      const className = classNames(affixStyle && rootClassName, {\n        [affixPrefixCls]: !!affixStyle\n      });\n      let props = omit(this.props, ['prefixCls', 'offsetTop', 'offsetBottom', 'target', 'onChange', 'affixPrefixCls', 'rootClassName']);\n      // Omit this since `onTestUpdatePosition` only works on test.\n      if (process.env.NODE_ENV === 'test') {\n        props = omit(props, ['onTestUpdatePosition']);\n      }\n      return /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: this.updatePosition\n      }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n        ref: this.placeholderNodeRef\n      }), affixStyle && /*#__PURE__*/React.createElement(\"div\", {\n        style: placeholderStyle,\n        \"aria-hidden\": \"true\"\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        ref: this.fixedNodeRef,\n        style: affixStyle\n      }, /*#__PURE__*/React.createElement(ResizeObserver, {\n        onResize: this.updatePosition\n      }, children))));\n    }\n  }]);\n  return InternalAffix;\n}(React.Component);\nInternalAffix.contextType = ConfigContext;\nconst Affix = /*#__PURE__*/forwardRef((props, ref) => {\n  const customizePrefixCls = props.prefixCls,\n    rootClassName = props.rootClassName;\n  const _useContext = useContext(ConfigContext),\n    getPrefixCls = _useContext.getPrefixCls;\n  const affixPrefixCls = getPrefixCls('affix', customizePrefixCls);\n  const _useStyle = useStyle(affixPrefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  const AffixProps = Object.assign(Object.assign({}, props), {\n    affixPrefixCls,\n    rootClassName: classNames(rootClassName, hashId)\n  });\n  return wrapSSR( /*#__PURE__*/React.createElement(InternalAffix, Object.assign({}, AffixProps, {\n    ref: ref\n  })));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Affix.displayName = 'Affix';\n}\nexport default Affix;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}